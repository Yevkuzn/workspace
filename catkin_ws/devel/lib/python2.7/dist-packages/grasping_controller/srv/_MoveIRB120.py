"""autogenerated by genpy from grasping_controller/MoveIRB120Request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveIRB120Request(genpy.Message):
  _md5sum = "ec083468e9067c595612b436b8a4cd45"
  _type = "grasping_controller/MoveIRB120Request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 joint_1
float64 joint_2
float64 joint_3
float64 joint_4
float64 joint_5
float64 joint_6

"""
  __slots__ = ['joint_1','joint_2','joint_3','joint_4','joint_5','joint_6']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_1,joint_2,joint_3,joint_4,joint_5,joint_6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveIRB120Request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joint_1 is None:
        self.joint_1 = 0.
      if self.joint_2 is None:
        self.joint_2 = 0.
      if self.joint_3 is None:
        self.joint_3 = 0.
      if self.joint_4 is None:
        self.joint_4 = 0.
      if self.joint_5 is None:
        self.joint_5 = 0.
      if self.joint_6 is None:
        self.joint_6 = 0.
    else:
      self.joint_1 = 0.
      self.joint_2 = 0.
      self.joint_3 = 0.
      self.joint_4 = 0.
      self.joint_5 = 0.
      self.joint_6 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.joint_1, _x.joint_2, _x.joint_3, _x.joint_4, _x.joint_5, _x.joint_6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint_1, _x.joint_2, _x.joint_3, _x.joint_4, _x.joint_5, _x.joint_6,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.joint_1, _x.joint_2, _x.joint_3, _x.joint_4, _x.joint_5, _x.joint_6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.joint_1, _x.joint_2, _x.joint_3, _x.joint_4, _x.joint_5, _x.joint_6,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
"""autogenerated by genpy from grasping_controller/MoveIRB120Response.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveIRB120Response(genpy.Message):
  _md5sum = "c17156c11ae0049542a406bcba8838dc"
  _type = "grasping_controller/MoveIRB120Response"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 error


"""
  __slots__ = ['error']
  _slot_types = ['int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveIRB120Response, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = 0
    else:
      self.error = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_q.pack(self.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.error,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_q.pack(self.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.error,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
class MoveIRB120(object):
  _type          = 'grasping_controller/MoveIRB120'
  _md5sum = '0efeb31429421373c6a962d15e843a72'
  _request_class  = MoveIRB120Request
  _response_class = MoveIRB120Response
